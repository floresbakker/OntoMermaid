rule:SerializeSHACLNodeShape
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a Mermaid diagram language label and definition for a SHACL node shape.'@en;
    skos:prefLabel 'Mermaid diagram language serialisation rule for SHACL node shape.'@en;
    sh:construct '''
prefix function: <https://data.rijksfinancien.nl/html/model/function/>
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

construct {

  # create the Mermaid diagram language for the OWL class to be serialized.
  
  $this mermaid:syntax "NODESHAPE";
        mermaid:label ?mermaidLabel.

} where {

  $this rdf:type sh:NodeShape.
  OPTIONAL
  {$this sh:targetNode ?target}
  OPTIONAL
  {$this sh:targetClass ?target}
  OPTIONAL
  {$this sh:targetObjectsOf ?targetpath}
  OPTIONAL
  {$this sh:targetsubjectsOf ?targetSubject}
  OPTIONAL
  {$this sh:nodeKind ?nodeKind}
  OPTIONAL
  {$this sh:class ?nodeClass}
  OPTIONAL
  {$this sh:datatype ?dataType}
  
  # Establish the label of the node shape to be serialized.
  BIND(function:getLabel($this) as ?mermaidLabelNodeShape)
  
  # Establish the label of the target to be serialized.
  BIND(function:getLabel(?target) as ?mermaidLabelTarget)
  
  # Establish the full definition of the node shape to be serialized.
  BIND(CONCAT(STR($this),"((mermaidLabelNodeShape)) -- targetNode --> ",?mermaidLabelTarget, "\\n"))) as ?mermaidDefinition)
  
  # Establish the mermaid code
  BIND(CONCAT("subgraph ",STR($this), "[Node shape]\\n", ?mermaidDefinition, "\\nend\\n") as ?mermaidLabel)
}  '''.