prefix dcm: <http://purl.org/dc/dcmitype/>
prefix dct: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfa: <http://www.w3.org/ns/rdfa#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix status: <http://purl.org/adms/status/>
prefix vann: <http://purl.org/vocab/vann/>
prefix void: <http://rdfs.org/ns/void#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

prefix documentType: <https://data.rijksfinancien.nl/dom/model/id/documentType/>
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix function: <https://data.rijksfinancien.nl/html/model/function/>
prefix graph: <https://data.rijksfinancien.nl/html/graph/>
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix rule: <https://data.rijksfinancien.nl/html/model/rule/>
prefix section: <https://data.rijksfinancien.nl/html/id/section/>
prefix shp: <https://data.rijksfinancien.nl/html/model/shp/>
prefix standard: <https://data.rijksfinancien.nl/html/id/standard/>
prefix target: <https://data.rijksfinancien.nl/html/model/target/>

  mermaid:
    a
      owl:Ontology,
      void:Dataset;
    dct:conformsTo 'https://datatracker.ietf.org/doc/html/rfc1942'^^xsd:anyURI;
    dct:created '2023-07-19'^^xsd:date;
    dct:creator
      'Flores Bakker',
      'Wouter Beek';
    dct:description '''The Mermaid Vocabulary models the Mermaid diagram language in RDF. Mermaid is a JavaScript-based diagramming and charting tool that uses Markdown-inspired text definitions and a renderer to create and modify complex diagrams. The main purpose of Mermaid is to help documentation catch up with development. This ontology defines the elements and relationships used within Mermaid diagrams, allowing for a standardized way to describe and interact with Mermaid diagrams in the context of the Semantic Web.'''@en;
    dct:abstract '''The Mermaid Vocabulary models the Mermaid diagram language in RDF. Mermaid is a JavaScript-based diagramming and charting tool that uses Markdown-inspired text definitions and a renderer to create and modify complex diagrams. The main purpose of Mermaid is to help documentation catch up with development. This ontology defines the elements and relationships used within Mermaid diagrams, allowing for a standardized way to describe and interact with Mermaid diagrams in the context of the Semantic Web.'''@en;
    dct:language 'iso639-1:en';
    dct:license 'http://creativecommons.org/licenses/by/4.0'^^xsd:anyURI;
    dct:publisher <https://www.w3.org/community/mermaid/>;
    dct:source <https://github.com/floresbakker/mermaid/>;
    dct:subject 'HTML'@en;
    dct:title 'HTML Ontology'@en;
    foaf:homepage 'https://www.w3.org/community/mermaid/'^^xsd:anyURI;
    owl:imports
      dct:,
      owl:,
      prov:,
      rdf:,
      rdfs:,
      sh:,
      skos:;
    owl:versionInfo '0.1.0';
    owl:versionIRI <https://github.com/floresbakker/mermaid/tree/main>;
    vann:preferredNamespacePrefix 'manchester';
    vann:preferredNamespaceUri 'https://data.rijksfinancien.nl/mermaid/model/def/';
    void:subSet graph:model;
    void:uriRegexPattern '^https://data.rijksfinancien.nl/mermaid/def/';
    void:uriSpace 'https://data.rijksfinancien.nl/mermaid/model/def/'^^xsd:anyURI.

  standard:mermaid
    a dct:Standard;
    dct:created '2023-07-19'^^xsd:date;
    dct:source 'https://mermaid.js.org/'^^xsd:anyURI;
    skos:prefLabel 'Mermaid diagram language'@en.

### OWL Class

 shp:SerializableOwlClass
    a sh:NodeShape;
    sh:rule rule:SerializeOwlClass;
    sh:target target:SerializableOwlClass;
    skos:prefLabel 'Serializable owl class shape'@en.

  target:SerializableOwlClass
    a sh:SPARQLTarget;
    sh:select '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {
  # Any OWL or RDFS class that is not further expressed in class expression
  
  {$this a owl:Class.}
  UNION
  {$this a rdfs:Class.}
  
  filter not exists {
    $this rdfs:subClassOf []
  }
  filter not exists {
    $this owl:equivalentClass []
  }
  filter not exists {
    $this owl:unionOf []
  }
  filter not exists {
    $this owl:intersectionOf []
  }
  filter not exists {
    $this owl:complementOf []
  }
  filter not exists {
    $this owl:oneOf []
  }
  
  # The OWL class must not have an Mermaid diagram language string yet
  
  filter not exists {
    $this mermaid:label [].
  }
}
  '''.

  rule:SerializeOwlClass
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a Mermaid diagram language label and definition for an OWL Class.'@en;
    skos:prefLabel 'Mermaid diagram language serialisation rule for owl class'@en;
    sh:construct '''
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

construct {

  # create the Mermaid diagram language for the OWL class to be serialized.
  
  $this mermaid:syntax 'CLASS';
        mermaid:label ?mermaidLabel.
} where {

  # Get the label of the OWL class to be serialized.
  {$this skos:prefLabel ?preferredLabel.
  FILTER (lang(?preferredLabel) = 'en')}
  union 
  {$this rdfs:label ?alternativeLabel.
  FILTER (lang(?alternativeLabel) = 'en')}
  
  # We use an heuristic based on the last part of the IRI to determine the mermaid diagram language
  bind(replace(str($this),'.*[/#]','') as ?implicitLabel)
  
  
  BIND(CONCAT(STR($this),"((",STR(COALESCE(?preferredLabel, ?alternativeLabel, ?implicitLabel)),"))") as ?mermaidLabel)
} 
'''.

### OWL Restriction

shp:SerializableOwlRestriction_AllValuesFrom
    a sh:NodeShape;
    sh:rule rule:SerializeOwlRestriction_AllValuesFrom;
    sh:target target:SerializableOwlRestriction_AllValuesFrom;
    skos:prefLabel 'Serializable owl restriction owl:allValuesFrom shape'@en.

  target:SerializableOwlRestriction_AllValuesFrom
    a sh:SPARQLTarget;
    sh:select '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A OWL class restriction for which the underlying class expressions are already serialized to Mermaid diagram language
  
  $this a owl:Restriction;
        owl:allValuesFrom [].

  filter not exists {
    $this mermaid:syntax "ONLY"
   }
   
  minus {
    $this owl:allValuesFrom ?allValuesFromClass.
      filter not exists {
       ?allValuesFromClass mermaid:label []
    }
  }
  
  minus {
    $this owl:onProperty ?someProperty.
    filter not exists {
      ?someProperty mermaid:label []
    }
 }
}
 
 '''.

  rule:SerializeOwlRestriction_AllValuesFrom
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a Mermaid diagram language label and definition for OWL Restriction owl:allValuesFrom.'@en;
    skos:prefLabel 'Mermaid diagram language serialisation rule for owl restriction owl:allValuesFrom'@en;
    sh:construct '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the Mermaid diagram language for the OWL class to be serialized.
  
  $this mermaid:syntax "ONLY";
        mermaid:label ?mermaidLabel.

} where {

  $this owl:allValuesFrom ?otherClass;
        owl:onProperty ?someProperty.
  
  # Get the labels for the class and property
  ?otherClass mermaid:label ?otherClassLabel.
  ?someProperty mermaid:label ?propertyLabel
  
  # Establish the full label of the OWL restriction class to be serialized.
  BIND(CONCAT(STR(?someProperty),"[",?propertyLabel, "] -- only --> ", str(?otherClass)) as ?mermaidRestriction)
  
  
  # Establish whether the restriction class has a label of its own or not. Use when present (but only if @this is not a blank node).
  OPTIONAL
  {
    $this skos:prefLabel ?preferredLabel.
    FILTER (lang(?preferredLabel) = 'en')
  }
  OPTIONAL 
  {
    $this rdfs:label ?alternativeLabel.
    FILTER (lang(?alternativeLabel) = 'en')
  }
  
  # Establish the label based on certain preferred labels   
  BIND(CONCAT("((",COALESCE(?preferredLabel, ?alternativeLabel, "))")) as ?classLabel) 
  BIND(IF(isBlank($this), CONCAT("subgraph ",STR($this)," [Restriction]\\n", ?mermaidRestriction, "\\nend"), CONCAT("subgraph ",STR($this), "[",?classLabel,"]\\n", ?mermaidRestriction, "\\nend\\n")) as ?mermaidLabel)
}
'''.


shp:SerializableOwlRestriction_SomeValuesFrom
    a sh:NodeShape;
    sh:rule rule:SerializeOwlRestriction_SomeValuesFrom;
    sh:target target:SerializableOwlRestriction_SomeValuesFrom;
    skos:prefLabel 'Serializable owl restriction owl:someValuesFrom shape'@en.

  target:SerializableOwlRestriction_SomeValuesFrom
    a sh:SPARQLTarget;
    sh:select '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A OWL class restriction for which the underlying class expressions are already serialized to Mermaid diagram language
  
  $this a owl:Restriction;
        owl:someValuesFrom [].
		
  filter not exists {
    $this mermaid:syntax 'SOME'
	}
   
  minus {
    $this owl:someValuesFrom ?someValuesFromClass
    filter not exists {
     ?someValuesFromClass mermaid:label []
    }
   }
 
  minus {
    $this owl:onProperty ?someProperty.
    filter not exists {
      ?someProperty mermaid:label []
    }
  }
}
 '''.

  rule:SerializeOwlRestriction_SomeValuesFrom
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a Mermaid diagram language label and definition for OWL Restriction owl:someValuesFrom.'@en;
    skos:prefLabel 'Mermaid diagram language serialisation rule for owl restriction owl:someValuesFrom'@en;
    sh:construct '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

construct {

  # create the Mermaid diagram language for the OWL class to be serialized.
  
  $this mermaid:syntax "SOME";
        mermaid:label ?mermaidLabel.

} where {

  $this owl:someValuesFrom ?otherClass;
        owl:onProperty ?someProperty.
  
  # Get the labels for the class and property
  ?otherClass mermaid:label ?otherClassLabel.
  ?someProperty mermaid:label ?propertyLabel
  
  # Establish the full label of the OWL restriction class to be serialized.
  BIND(CONCAT(STR(?someProperty),"[",?propertyLabel, "] -- some --> ", str(?otherClass)) as ?mermaidRestriction)
  
  
  # Establish whether the restriction class has a label of its own or not. Use when present (but only if @this is not a blank node).
  OPTIONAL
  {
    $this skos:prefLabel ?preferredLabel.
    FILTER (lang(?preferredLabel) = 'en')
  }
  OPTIONAL 
  {
    $this rdfs:label ?alternativeLabel.
    FILTER (lang(?alternativeLabel) = 'en')
  }
  
  # Establish the label based on certain preferred labels   
  BIND(CONCAT("((",COALESCE(?preferredLabel, ?alternativeLabel, "))")) as ?classLabel) 
  BIND(IF(isBlank($this), CONCAT("subgraph ",STR($this)," [Restriction]\\n", ?mermaidRestriction, "\\nend"), CONCAT("subgraph ",STR($this), "[",?classLabel,"]\\n", ?mermaidRestriction, "\\nend\\n")) as ?mermaidLabel)
}  '''.


shp:SerializableOwlRestriction_hasValue
    a sh:NodeShape;
    sh:rule rule:SerializeOwlRestriction_hasValue;
    sh:target target:SerializableOwlRestriction_hasValue;
    skos:prefLabel 'Serializable owl restriction owl:hasValue shape'@en.

  target:SerializableOwlRestriction_hasValue
    a sh:SPARQLTarget;
    sh:select '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A OWL class restriction for which the underlying named individual is already serialized to Mermaid diagram language
  
  $this a owl:Restriction;
        owl:hasValue [].

  filter not exists {
   $this mermaid:syntax 'VALUE'
  }
   
  minus {
    $this owl:hasValue ?value.
    filter not exists {
     ?value mermaid:syntax 'individual'.
    }
  }
 }
  '''.

  rule:SerializeOwlRestriction_hasValue
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a Mermaid diagram language label and definition for OWL Restriction owl:hasValue.'@en;
    skos:prefLabel 'Mermaid diagram language serialisation rule for owl restriction owl:hasValue'@en;
    sh:construct '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

construct {

  # create the Mermaid diagram language for the OWL class to be serialized.
  
  $this mermaid:syntax "VALUE";
        mermaid:label ?mermaidLabel.

} where {

  $this owl:hasValue ?otherClass;
        owl:onProperty ?someProperty.
  
  # Get the labels for the class and property
  ?otherClass mermaid:label ?otherClassLabel.
  ?someProperty mermaid:label ?propertyLabel
  
  # Establish the full label of the OWL restriction class to be serialized.
  BIND(CONCAT(STR(?someProperty),"[",?propertyLabel, "] -- value --> ", str(?otherClass)) as ?mermaidRestriction)
  
  
  # Establish whether the restriction class has a label of its own or not. Use when present (but only if @this is not a blank node).
  OPTIONAL
  {
    $this skos:prefLabel ?preferredLabel.
    FILTER (lang(?preferredLabel) = 'en')
  }
  OPTIONAL 
  {
    $this rdfs:label ?alternativeLabel.
    FILTER (lang(?alternativeLabel) = 'en')
  }
  
  # Establish the label based on certain preferred labels   
  BIND(CONCAT("((",COALESCE(?preferredLabel, ?alternativeLabel, "))")) as ?classLabel) 
  BIND(IF(isBlank($this), CONCAT("subgraph ",STR($this)," [Restriction]\\n", ?mermaidRestriction, "\\nend"), CONCAT("subgraph ",STR($this), "[",?classLabel,"]\\n", ?mermaidRestriction, "\\nend\\n")) as ?mermaidLabel)
} '''.

shp:SerializableOwlRestriction_cardinality
    a sh:NodeShape;
    sh:rule rule:SerializeOwlRestriction_cardinality;
    sh:target target:SerializableOwlRestriction_cardinality;
    skos:prefLabel 'Serializable owl restriction owl:cardinality shape'@en.

  target:SerializableOwlRestriction_cardinality
    a sh:SPARQLTarget;
    sh:select '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A OWL class restriction for which the underlying class expressions are already serialized to Mermaid diagram language
  
  $this a owl:Restriction;
        owl:cardinality [];
		owl:onProperty ?someProperty.
   
  filter not exists {
     $this mermaid:syntax 'EXACTLY'
  }

  minus {
    $this owl:onProperty ?someProperty.
    filter not exists {
      ?someProperty mermaid:label []
    }
  }
}
  '''.

  rule:SerializeOwlRestriction_cardinality
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a Mermaid diagram language label and definition for OWL Restriction owl:cardinality.'@en;
    skos:prefLabel 'Mermaid diagram language serialisation rule for owl restriction owl:cardinality'@en;
    sh:construct '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

construct {

  # create the Mermaid diagram language for the OWL class to be serialized.
  
  $this mermaid:syntax "EXACTLY";
        mermaid:label ?mermaidLabel.

} where {

  $this owl:cardinality ?n;
        owl:onProperty ?someProperty.
  ?someProperty mermaid:label ?propertyLabel.
  

  
  # Establish the full label of the OWL restriction class to be serialized.
  BIND(CONCAT(STR(?someProperty),"[",?propertyLabel, "] -- exactly --> ", str(?n)) as ?mermaidRestriction)
  
      
  # Establish whether the restriction class has a label of its own or not. Use when present (but only if @this is not a blank node).
  OPTIONAL
  {
    $this skos:prefLabel ?preferredLabel.
    FILTER (lang(?preferredLabel) = 'en')
  }
  OPTIONAL 
  {
    $this rdfs:label ?alternativeLabel.
    FILTER (lang(?alternativeLabel) = 'en')
  }
  
  # Establish the label based on certain preferred labels   
  BIND(CONCAT("((",COALESCE(?preferredLabel, ?alternativeLabel, "))")) as ?classLabel) 
  BIND(IF(isBlank($this), CONCAT("subgraph ",STR($this)," [Restriction]\\n", ?mermaidRestriction, "\\nend"), CONCAT("subgraph ",STR($this), "[",?classLabel,"]\\n", ?mermaidRestriction, "\\nend\\n")) as ?mermaidLabel)
}

'''.

shp:SerializableOwlRestriction_maxCardinality
    a sh:NodeShape;
    sh:rule rule:SerializeOwlRestriction_maxCardinality;
    sh:target target:SerializableOwlRestriction_maxCardinality;
    skos:prefLabel 'Serializable owl restriction owl:maxCardinality shape'@en.

  target:SerializableOwlRestriction_maxCardinality
    a sh:SPARQLTarget;
    sh:select '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A OWL class restriction for which the underlying class expressions are already serialized to Mermaid diagram language
  
  $this a owl:Restriction;
        owl:maxCardinality [];
		owl:onProperty ?someProperty.
   
  filter not exists {
    $this mermaid:syntax 'MAX'
  }

  minus {
    $this owl:onProperty ?someProperty.
    filter not exists {
      ?someProperty mermaid:label []
    }
  }
}
  '''.

  rule:SerializeOwlRestriction_maxCardinality
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a Mermaid diagram language label and definition for OWL Restriction owl:maxCardinality.'@en;
    skos:prefLabel 'Mermaid diagram language serialisation rule for owl restriction owl:maxCardinality'@en;
    sh:construct '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

construct {

  # create the Mermaid diagram language for the OWL class to be serialized.
  
  $this mermaid:syntax "MAX";
        mermaid:label ?mermaidLabel.

} where {

  $this owl:maxCardinality ?n;
        owl:onProperty ?someProperty.
  ?someProperty mermaid:label ?propertyLabel.
  

  
  # Establish the full label of the OWL restriction class to be serialized.
  BIND(CONCAT(STR(?someProperty),"[",?propertyLabel, "] -- max --> ", str(?n)) as ?mermaidRestriction)
  
      
  # Establish whether the restriction class has a label of its own or not. Use when present (but only if @this is not a blank node).
  OPTIONAL
  {
    $this skos:prefLabel ?preferredLabel.
    FILTER (lang(?preferredLabel) = 'en')
  }
  OPTIONAL 
  {
    $this rdfs:label ?alternativeLabel.
    FILTER (lang(?alternativeLabel) = 'en')
  }
  
  # Establish the label based on certain preferred labels   
  BIND(CONCAT("((",COALESCE(?preferredLabel, ?alternativeLabel, "))")) as ?classLabel) 
  BIND(IF(isBlank($this), CONCAT("subgraph ",STR($this)," [Restriction]\\n", ?mermaidRestriction, "\\nend"), CONCAT("subgraph ",STR($this), "[",?classLabel,"]\\n", ?mermaidRestriction, "\\nend\\n")) as ?mermaidLabel)
}
'''.

shp:SerializableOwlRestriction_minCardinality
    a sh:NodeShape;
    sh:rule rule:SerializeOwlRestriction_minCardinality;
    sh:target target:SerializableOwlRestriction_minCardinality;
    skos:prefLabel 'Serializable owl restriction owl:minCardinality shape'@en.

  target:SerializableOwlRestriction_minCardinality
    a sh:SPARQLTarget;
    sh:select '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A OWL class restriction for which the underlying class expressions are already serialized to Mermaid diagram language
  
  $this a owl:Restriction;
        owl:minCardinality [].
   
  filter not exists {
    $this mermaid:syntax 'MIN'
  }

  minus {
    $this owl:onProperty ?someProperty.
    filter not exists {
      ?someProperty mermaid:label []
    }
  }
}
  '''.

  rule:SerializeOwlRestriction_minCardinality
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a Mermaid diagram language label and definition for OWL Restriction owl:minCardinality.'@en;
    skos:prefLabel 'Mermaid diagram language serialisation rule for owl restriction owl:minCardinality'@en;
    sh:construct '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

construct {

  # create the Mermaid diagram language for the OWL class to be serialized.
  
  $this mermaid:syntax "MIN";
        mermaid:label ?mermaidLabel.

} where {

  $this owl:minCardinality ?n;
        owl:onProperty ?someProperty.
  ?someProperty mermaid:label ?propertyLabel.
  

  
  # Establish the full label of the OWL restriction class to be serialized.
  BIND(CONCAT(STR(?someProperty),"[",?propertyLabel, "] -- min --> ", str(?n)) as ?mermaidRestriction)
  
      
  # Establish whether the restriction class has a label of its own or not. Use when present (but only if @this is not a blank node).
  OPTIONAL
  {
    $this skos:prefLabel ?preferredLabel.
    FILTER (lang(?preferredLabel) = 'en')
  }
  OPTIONAL 
  {
    $this rdfs:label ?alternativeLabel.
    FILTER (lang(?alternativeLabel) = 'en')
  }
  
  # Establish the label based on certain preferred labels   
  BIND(CONCAT("((",COALESCE(?preferredLabel, ?alternativeLabel, "))")) as ?classLabel) 
  BIND(IF(isBlank($this), CONCAT("subgraph ",STR($this)," [Restriction]\\n", ?mermaidRestriction, "\\nend"), CONCAT("subgraph ",STR($this), "[",?classLabel,"]\\n", ?mermaidRestriction, "\\nend\\n")) as ?mermaidLabel)
}
'''.

shp:Serializable_subClassOf
    a sh:NodeShape;
    sh:rule rule:Serialize_subClassOf;
    sh:target target:Serializable_subClassOf;
    skos:prefLabel 'Serializable rdfs:subClassOf shape'@en.

  target:Serializable_subClassOf
    a sh:SPARQLTarget;
    sh:select '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A subclass of some other, atomic or composite, class, of which the latter's underlying class expressions are already serialized to Mermaid diagram language.
  
  {$this rdfs:subClassOf [].
   
   filter not exists {
    $this mermaid:syntax 'SUBCLASSOF'
   }
  
   minus {
    $this rdfs:subClassOf ?subClassOfClass
    filter not exists {
     ?subClassOfClass mermaid:label []
    }
   }
  }
  
  # Also get any subclass of some atomic class, the latter being undefined. We will infer the mermaid diagram language for this with an heuristic.
  
  UNION 
  
  { $this rdfs:subClassOf ?undefinedClass.
  filter not exists {?undefinedClass rdf:type owl:Class}
  filter not exists {?undefinedClass rdf:type owl:Restriction}
  filter not exists {?undefinedClass rdfs:subClassOf []}
  filter not exists {?undefinedClass owl:equivalentClass []}
  filter not exists {?undefinedClass owl:oneOf []}
  filter not exists {?undefinedClass owl:unionOf []}
  filter not exists {?undefinedClass owl:intersectionOf []}
  filter not exists {?undefinedClass owl:complementOf []}
  
 }
 }
  '''.

  rule:Serialize_subClassOf
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a Mermaid diagram language label and definition for rdfs:subClassOf classes.'@en;
    skos:prefLabel 'Mermaid diagram language serialisation rule for rdfs:subClassOf classes.'@en;
    sh:construct '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the Mermaid diagram language for the class to be serialized.
  $this mermaid:syntax 'SUBCLASSOF';
        mermaid:label ?mermaidLabel.

} where {
  {
    $this rdfs:subClassOf ?superClass.
    
  }
   
    OPTIONAL
  {
    $this skos:prefLabel ?prefLabel.
    FILTER (lang(?prefLabel) = 'en')
  }
  OPTIONAL 
  {
    $this rdfs:label ?altLabel.
    FILTER (lang(?altLabel) = 'en')
  }
  bind(replace(str($this),'.*[/#]','') as ?implicitLabel)
  # Get the label of the class to be serialized.
   
  BIND(IF(isBlank($this),"Anonymous class",COALESCE(?prefLabel, ?altLabel, ?implicitLabel)) as ?classLabel)
  BIND(CONCAT(STR($this), "((",?classLabel,")) -- subClassOf --> ", STR(?superClass), "\\n") as ?mermaidLabel)

} '''.

shp:Serializable_equivalentClass
    a sh:NodeShape;
    sh:rule rule:Serialize_equivalentClass;
    sh:target target:Serializable_equivalentClass;
    skos:prefLabel 'Serializable owl:equivalentClass shape'@en.

  target:Serializable_equivalentClass
    a sh:SPARQLTarget;
    sh:select '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # An equivalent class of some other class, of which the latter's underlying class expressions are already serialized to Mermaid diagram language.
  
  {$this owl:equivalentClass [].
  
  filter not exists {
    $this mermaid:syntax 'EQUIVALENTTO'
   }
  
  minus {
    $this owl:equivalentClass ?equivalentClass.
    filter not exists {
     ?equivalentClass mermaid:label []
    }
   }
  }
  # Also get any equivalent of some atomic class, the latter being undefined. We will infer the mermaid diagram language for this with an heuristic.
  
  UNION 
  
  { $this owl:equivalentClass ?undefinedClass.
  filter not exists {?undefinedClass rdf:type owl:Class}
  filter not exists {?undefinedClass rdf:type owl:Restriction}
  filter not exists {?undefinedClass rdfs:subClassOf []}
  filter not exists {?undefinedClass owl:equivalentClass []}
  filter not exists {?undefinedClass owl:oneOf []}
  filter not exists {?undefinedClass owl:unionOf []}
  filter not exists {?undefinedClass owl:intersectionOf []}
  filter not exists {?undefinedClass owl:complementOf []}
  }
 }
 
  '''.

  rule:Serialize_equivalentClass
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a Mermaid diagram language label and definition for owl:equivalentClass classes.'@en;
    skos:prefLabel 'Mermaid diagram language serialisation rule for owl:equivalentClass classes.'@en;
    sh:construct '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the Mermaid diagram language for the class to be serialized.
  $this mermaid:syntax 'EQUIVALENTTO';
        mermaid:label ?mermaidLabel.

} where {
  {
    $this owl:equivalentClass ?superClass.
    
  }
   
    OPTIONAL
  {
    $this skos:prefLabel ?prefLabel.
    FILTER (lang(?prefLabel) = 'en')
  }
  OPTIONAL 
  {
    $this rdfs:label ?altLabel.
    FILTER (lang(?altLabel) = 'en')
  }
  bind(replace(str($this),'.*[/#]','') as ?implicitLabel)
  # Get the label of the class to be serialized.
   
  BIND(IF(isBlank($this),"Anonymous class",COALESCE(?prefLabel, ?altLabel, ?implicitLabel)) as ?classLabel)
  BIND(CONCAT(STR($this), "((",?classLabel,")) -- equivalentTo --> ", STR(?superClass), "\\n") as ?mermaidLabel)

}
'''.

shp:Serializable_unionOf
    a sh:NodeShape;
    sh:rule rule:Serialize_unionOf;
    sh:target target:Serializable_unionOf;
    skos:prefLabel 'Serializable owl:unionOf shape'@en.

  target:Serializable_unionOf
    a sh:SPARQLTarget;
    sh:select '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A OWL class restriction for which the underlying class expressions are already serialized to Mermaid diagram language
  
  $this owl:unionOf [].
  
  filter not exists {
    $this mermaid:syntax "OR"
   }
   
  minus {
    $this owl:unionOf/rdf:rest*/rdf:first ?someClass.
    filter not exists {
     ?someClass mermaid:label []
    }
  }
 }
  '''.

  rule:Serialize_unionOf
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a Mermaid diagram language label and definition for owl:unionOf classes.'@en;
    skos:prefLabel 'Mermaid diagram language serialisation rule for owl:unionOf classes.'@en;
    sh:construct '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the Mermaid diagram language for the OWL class to be serialized.
  
  $this  mermaid:syntax "OR";
         mermaid:label ?mermaidLabel.
        
} where {

  {select (group_concat(str(?list_item);separator=' -- or --> ') as ?mermaidDefinition) where {
  $this owl:unionOf/rdf:rest*/rdf:first ?list_item.
  
  }
  }
  OPTIONAL
  {
    $this skos:prefLabel ?prefLabel.
    FILTER (lang(?prefLabel) = 'en')
  }
  OPTIONAL 
  {
    $this rdfs:label ?altLabel.
    FILTER (lang(?altLabel) = 'en')
  }
  BIND(REPLACE(STR($this),'.*[/#]','') as ?implicitLabel)
  BIND(IF(isBlank($this),"Anonymous class",COALESCE(?prefLabel, ?altLabel, ?implicitLabel)) as ?classLabel)
  
  BIND(CONCAT("subgraph ",STR($this),"[", ?classLabel, "]\\n", ?mermaidDefinition, "\\nend\\n") as ?mermaidLabel)
  
}
'''.

shp:Serializable_intersectionOf
    a sh:NodeShape;
    sh:rule rule:Serialize_intersectionOf;
    sh:target target:Serializable_intersectionOf;
    skos:prefLabel 'Serializable owl:intersectionOf shape'@en.

  target:Serializable_intersectionOf
    a sh:SPARQLTarget;
    sh:select '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A class that is the intersection of other classes for which the latter's underlying class expressions are already serialized to Mermaid diagram language
  
  $this owl:intersectionOf [].
  
  filter not exists {
    $this mermaid:syntax "AND"
   }
   
  minus {
    $this owl:intersectionOf/rdf:rest*/rdf:first ?someClass
    filter not exists {
     ?someClass mermaid:syntax [].
    }
  }
 }
  '''.

  rule:Serialize_intersectionOf
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a Mermaid diagram language label and definition for owl:intersectionOf classes.'@en;
    skos:prefLabel 'Mermaid diagram language serialisation rule for owl:intersectionOf classes.'@en;
    sh:construct '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the Mermaid diagram language for the OWL class to be serialized.
  
  $this  mermaid:syntax "AND";
         mermaid:label ?mermaidLabel.
        
} where {

  {select (group_concat(str(?list_item);separator=' -- and --> ') as ?mermaidDefinition) where {
  $this owl:intersectionOf/rdf:rest*/rdf:first ?list_item.
  
  }
  }
  OPTIONAL
  {
    $this skos:prefLabel ?prefLabel.
    FILTER (lang(?prefLabel) = 'en')
  }
  OPTIONAL 
  {
    $this rdfs:label ?altLabel.
    FILTER (lang(?altLabel) = 'en')
  }
  BIND(REPLACE(STR($this),'.*[/#]','') as ?implicitLabel)
  BIND(IF(isBlank($this),"Anonymous class",COALESCE(?prefLabel, ?altLabel, ?implicitLabel)) as ?classLabel)
  
  BIND(CONCAT("subgraph ",STR($this),"[", ?classLabel, "]\\n", ?mermaidDefinition, "\\nend\\n") as ?mermaidLabel)
  
}
'''.

shp:Serializable_oneOf
    a sh:NodeShape;
    sh:rule rule:Serialize_oneOf;
    sh:target target:Serializable_oneOf;
    skos:prefLabel 'Serializable owl:oneOf shape'@en.

  target:Serializable_oneOf
    a sh:SPARQLTarget;
    sh:select '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A OWL class restriction for which the underlying class expressions are already serialized to Mermaid diagram language
  
  $this owl:oneOf [].
  
  filter not exists {
    $this mermaid:syntax "{}"
   }
   
  minus {
    $this owl:oneOf/rdf:rest*/rdf:first ?someIndividual.
    filter not exists {
     ?someIndividual mermaid:label []
    }
  }
 }
  '''.

  rule:Serialize_oneOf
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a Mermaid diagram language label and definition for owl:oneOf classes.'@en;
    skos:prefLabel 'Mermaid diagram language serialisation rule for owl:oneOf classes.'@en;
    sh:construct '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the Mermaid diagram language for the OWL class to be serialized.
  
  $this  mermaid:syntax "{}";
         mermaid:label ?mermaidLabel.
        
} where {

  {select (group_concat(str(?list_items);separator=' ') as ?mermaidDefinition) where {
  $this owl:unionOf/rdf:rest*/rdf:first ?list_item.
  BIND(CONCAT('{',?list_item, '}') as ?list_items)
  
  }
  }
  OPTIONAL
  {
    $this skos:prefLabel ?prefLabel.
    FILTER (lang(?prefLabel) = 'en')
  }
  OPTIONAL 
  {
    $this rdfs:label ?altLabel.
    FILTER (lang(?altLabel) = 'en')
  }
  BIND(REPLACE(STR($this),'.*[/#]','') as ?implicitLabel)
  BIND(IF(isBlank($this),"Anonymous class",COALESCE(?prefLabel, ?altLabel, ?implicitLabel)) as ?classLabel)
  
  BIND(CONCAT("subgraph ",STR($this),"[", ?classLabel, "]\\n", ?mermaidDefinition, "\\nend") as ?mermaidLabel)
  
}
'''.

shp:Serializable_complementOf
    a sh:NodeShape;
    sh:rule rule:Serialize_complementOf;
    sh:target target:Serializable_complementOf;
    skos:prefLabel 'Serializable owl:complementOf shape'@en.

  target:Serializable_complementOf
    a sh:SPARQLTarget;
    sh:select '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A class that is the complement of some other class, of which the latter's underlying class expressions are already serialized to Mermaid diagram language.
  
  $this owl:complementOf [].
  
  filter not exists {
    $this mermaid:syntax "NOT"
   }
   
  minus {
    $this owl:complementOf ?complementOfClass
    filter not exists {
     ?complementOfClass mermaid:label []
    }
  }
 }
  '''.

  rule:Serialize_complementOf
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a Mermaid diagram language label and definition for owl:complementOf classes.'@en;
    skos:prefLabel 'Mermaid diagram language serialisation rule for owl:complementOf classes.'@en;
    sh:construct '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the Mermaid diagram language for the OWL class to be serialized.
  
  $this mermaid:syntax "NOT";
        mermaid:label ?mermaidLabel.
       
} where {

  $this owl:complementOf ?complementOfClass.
  # There may be complement classes that unfortunately do not get defined in the turtle file. 
  
  OPTIONAL
  {
    $this skos:prefLabel ?prefLabel.
    FILTER (lang(?prefLabel) = 'en')
  }
  OPTIONAL 
  {
    $this rdfs:label ?altLabel.
    FILTER (lang(?altLabel) = 'en')
  }
  BIND(REPLACE(STR($this),'.*[/#]','') as ?implicitLabel)
  BIND(IF(isBlank($this),"Anonymous class",COALESCE(?prefLabel, ?altLabel, ?implicitLabel)) as ?classLabel)
  BIND(CONCAT(" -- not --> ",STR(?complementOfClass)) as ?mermaidDefinition)
  BIND(CONCAT("subgraph ",STR($this),"[", ?classLabel, "]\\n", ?mermaidDefinition, "\\nend") as ?mermaidLabel)
  
} 
'''.

shp:Serializable_datatypeProperty
    a sh:NodeShape;
    sh:rule rule:Serialize_datatypeProperty;
    sh:target target:Serialize_datatypeProperty;
    skos:prefLabel 'Serializable owl:DatatypeProperty shape'@en.

  target:Serialize_datatypeProperty
    a sh:SPARQLTarget;
    sh:select '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A datatype property for which underlying class expressions are already serialized to Mermaid diagram language, but which does not have subPropertyOf or equivalentProperty relations.
  
  $this rdf:type owl:DatatypeProperty.
  filter not exists {
  $this mermaid:syntax 'DATATYPEPROPERTY'}
   
  minus {
    $this rdfs:domain ?someClass.
    filter not exists {
     ?someClass mermaid:label []
    }
  }
 }
  '''.


  rule:Serialize_datatypeProperty
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a Mermaid diagram language label and definition for the rdfs:domain of an owl:DatatypeProperty.'@en;
    skos:prefLabel 'Mermaid diagram language serialisation rule for owl:DatatypeProperty.'@en;
    sh:construct '''
prefix function: <https://data.rijksfinancien.nl/html/model/function/>
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the Mermaid diagram language for the OWL property to be serialized.
  
  $this mermaid:syntax 'DATATYPEPROPERTY';
        mermaid:label ?mermaidLabel;
        mermaid:domain ?manchesterDomain;
        mermaid:range ?manchesterRange.
        
} where {


  # Label
  
  {
  {$this skos:prefLabel ?preferredLabel.
  FILTER (lang(?preferredLabel) = 'en')}
  UNION 
  {$this rdfs:label ?alternativeLabel.
  FILTER (lang(?alternativeLabel) = 'en')}
    
  # Get the label of the OWL class to be serialized when there is no formal label
  bind(replace(str($this),'.*[/#]','') as ?implicitLabel)
  
  # Establish the label of the property to be serialized.
  BIND(CONCAT("[=",COALESCE(?preferredLabel, ?alternativeLabel, ?implicitLabel),"=]") as ?mermaidLabel)
  }
  
  # Domain
  UNION
  {$this rdfs:domain ?domainClass.
  ?domainClass mermaid:label ?manchesterDomain.}
  
  # Range 
  UNION
  {$this rdfs:range ?rangeDatatype.
  BIND(function:getPrefixedIRI(?rangeDatatype) as ?manchesterRange)
  }
}  
'''.

shp:Serializable_objectProperty
    a sh:NodeShape;
    sh:rule rule:Serialize_objectProperty;
    sh:target target:Serialize_objectProperty;
    skos:prefLabel 'Serializable owl:ObjectProperty shape'@en.

  target:Serialize_objectProperty
    a sh:SPARQLTarget;
    sh:select '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # An object property for which underlying class expressions are already serialized to Mermaid diagram language, but which does not have subPropertyOf or equivalentProperty relations.
  
  $this rdf:type owl:ObjectProperty.
  filter not exists {
  $this mermaid:syntax 'OBJECTPROPERTY'}
   
  minus {
    $this rdfs:domain ?someDomainClass.
    filter not exists {
     ?someDomainClass mermaid:label []
    }
  }
  
  minus {
    $this rdfs:range ?someRangeClass.
    filter not exists {
     ?someDomainClass mermaid:label []
    }
  }
  
 }
  '''.


  rule:Serialize_objectProperty
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a Mermaid diagram language label and definition for the rdfs:domain and rdfs:range of an owl:ObjectProperty.'@en;
    skos:prefLabel 'Mermaid diagram language serialisation rule for owl:ObjectProperty.'@en;
    sh:construct '''
prefix function: <https://data.rijksfinancien.nl/html/model/function/>
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the Mermaid diagram language for the OWL property to be serialized.
  
  $this mermaid:syntax 'OBJECTPROPERTY';
        mermaid:label ?mermaidLabel;
        mermaid:domain ?manchesterDomain;
        mermaid:range ?manchesterRange.
        
} where {


  # Label
  
  {
  {$this skos:prefLabel ?preferredLabel.
  FILTER (lang(?preferredLabel) = 'en')}
  UNION 
  {$this rdfs:label ?alternativeLabel.
  FILTER (lang(?alternativeLabel) = 'en')}
    
  # Get the label of the OWL class to be serialized when there is no formal label
  bind(replace(str($this),'.*[/#]','') as ?implicitLabel)
  
  # Establish the label of the property to be serialized.
  BIND(CONCAT("[=",COALESCE(?preferredLabel, ?alternativeLabel, ?implicitLabel),"=]") as ?mermaidLabel)
  }
  
  # Domain
  UNION
  {$this rdfs:domain ?domainClass.
  ?domainClass mermaid:label ?manchesterDomain.}
  
  # Range 
  UNION
  {$this rdfs:range ?rangeClass.
  ?rangeClass mermaid:label ?manchesterRange.}
  
}  
'''.

shp:Serializable_subPropertyOf
    a sh:NodeShape;
    sh:rule rule:Serialize_subPropertyOf;
    sh:target target:Serialize_subPropertyOf;
    skos:prefLabel 'Serializable owl:DatatypeProperty shape with a rdfs:subPropertyOf relation.'@en.

  target:Serialize_subPropertyOf
    a sh:SPARQLTarget;
    sh:select '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A datatype or object property for which exists some subproperty relation.
  
  $this rdfs:subPropertyOf ?someProperty.
  filter not exists {
    $this mermaid:subPropertyOf []
    }
  
  minus {
	$this rdfs:subPropertyOf ?someProperty.
     filter not exists {	
     ?someProperty mermaid:label []
    }
   }
}
'''.

  rule:Serialize_subPropertyOf
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a Mermaid diagram language for an owl:DatatypeProperty with a subPropertyOf relation.'@en;
    skos:prefLabel 'Mermaid diagram language serialisation rule for owl:DatatypeProperty with a subPropertyOf relation.'@en;
    sh:construct '''
prefix function: <https://data.rijksfinancien.nl/html/model/function/>
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the Mermaid diagram language for the OWL property to be serialized.
  
  $this mermaid:syntax 'SUBPROPERTY';
        mermaid:subPropertyOf ?manchesterSuperProperty.		
  
} where {

  $this rdfs:subPropertyOf ?superProperty.
  ?superProperty mermaid:label ?manchesterSuperProperty.
   
}  
'''.

shp:Serializable_equivalentProperty
    a sh:NodeShape;
    sh:rule rule:Serialize_equivalentProperty;
    sh:target target:Serialize_equivalentProperty;
    skos:prefLabel 'Serializable owl:DatatypeProperty shape with a owl:equivalentProperty relation.'@en.

  target:Serialize_equivalentProperty
    a sh:SPARQLTarget;
    sh:select '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A datatype or object property for which exists some equivalent property relation.
  $this owl:equivalentProperty ?someProperty.
  
  filter not exists {
  $this mermaid:equivalentProperty []}
  
  minus {
  $this owl:equivalentProperty ?someProperty
    filter not exists 
      {
       ?someProperty mermaid:label []
      }   
  }
}
'''.

  rule:Serialize_equivalentProperty
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a Mermaid diagram language for an owl:DatatypeProperty with an equivalentProperty relation.'@en;
    skos:prefLabel 'Mermaid diagram language serialisation rule for owl:DatatypeProperty with an equivalentProperty relation.'@en;
    sh:construct '''
prefix function: <https://data.rijksfinancien.nl/html/model/function/>
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the Mermaid diagram language for the OWL property to be serialized.
  
  $this mermaid:syntax 'EQUIVALENTPROPERTY';
        mermaid:equivalentProperty ?manchesterEquivalentProperty.		
  
} where {

  $this owl:equivalentProperty ?equivalentProperty.
  
  ?equivalentProperty mermaid:label ?manchesterEquivalentProperty.
  
}  
'''.

shp:Serializable_namedIndividual
    a sh:NodeShape;
    sh:rule rule:Serialize_namedIndividual;
    sh:target target:Serialize_namedIndividual;
    skos:prefLabel 'Serializable Named Individual shape.'@en.

target:Serialize_namedIndividual
    a sh:SPARQLTarget;
    sh:select '''
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix sh: <http://www.w3.org/ns/shacl#>

select $this {

  # A named individual for which underlying class expressions are already serialized to Mermaid diagram language.
  
  $this rdf:type ?class.   
  filter not exists {
    $this mermaid:syntax 'individual'
  }  
 
  minus {
    $this rdf:type ?class. 
    filter not exists {
     ?class mermaid:label []
    }
  }
FILTER (?class NOT IN (sh:PropertyShape, sh:NodeShape, sh:SPARQLRule, rdfs:Class, rdf:Property, owl:Class, owl:DatatypeProperty, owl:ObjectProperty, owl:FunctionalProperty, owl:Restriction, owl:Ontology))
}
'''.

rule:Serialize_namedIndividual
  a sh:SPARQLRule;
  skos:prefLabel 'Named individuals rule'@en;
  rdfs:comment 'The named individuals rule creates a section of named individuals for the ontology in the document.'@en ;
  sh:construct """
prefix dct: <http://purl.org/dc/terms/>
prefix dc:  <http://purl.org/dc/elements/1.1/>
prefix dcm: <http://purl.org/dc/dcmitype/>
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix function: <https://data.rijksfinancien.nl/html/model/function/>
prefix html: <https://data.rijksfinancien.nl/html/model/def/> 
prefix mermaid: <https://data.rijksfinancien.nl/mermaid/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
prefix respec: <https://respec.org/model/> 
prefix schema: <http://schema.org/>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix vann: <http://purl.org/vocab/vann/>
construct {
  # create the Mermaid diagram language for the named individual to be serialized.
  $this mermaid:syntax 'INDIVIDUAL';
        mermaid:individual ?mermaidLabel;
		mermaid:label ?mermaidLabel;
        mermaid:type ?manchesterType;
        mermaid:fact ?manchesterFact.
} where {
  # Label
  {
    {
      $this skos:prefLabel ?preferredLabel.
	   FILTER (lang(?preferredLabel) = 'en')
	  
    }
    UNION 
    {
      $this rdfs:label ?alternativeLabel.
	      FILTER (lang(?alternativeLabel) = 'en')
    }
   
    # We use an heuristic based on the last part of the IRI to determine the mermaid diagram language based label
    BIND(REPLACE(STR($this),'.*[/#]','') as ?implicitLabel)
     
	# Establish explicit label, if any.
    BIND(CONCAT("[=",COALESCE(?preferredLabel, ?alternativeLabel),"=]") as ?explicitLabel)
    
	# Establish the label of the named individual to be serialized.
    BIND(COALESCE(?explicitLabel, ?implicitLabel) as ?mermaidLabel)
  }
  # Type
  UNION
  {
    $this a ?class.
    ?class mermaid:label ?className.
    BIND(CONCAT("Type:  ", ?className) as ?manchesterType)
    FILTER (?class NOT IN (sh:PropertyShape, sh:NodeShape, owl:Class))
  }
  # Fact 
  UNION
  {
    $this ?property ?literal.
    ?property rdf:type owl:DatatypeProperty;
              mermaid:label ?propertyLabel.
    FILTER NOT EXISTS 
    {
      $this rdf:type sh:PropertyShape
    }
  }
  UNION
  {
    $this ?property ?object.
    ?property rdf:type owl:ObjectProperty;
              mermaid:label ?propertyLabel.
    ?object   mermaid:label ?objectLabel.
    FILTER NOT EXISTS 
    {
      $this rdf:type sh:PropertyShape
    }
  }
  BIND(CONCAT("Fact:  ", function:getPrefixedIRI(?propertyLabel), " ", COALESCE(str(?literal), ?objectLabel)) as ?manchesterFact)
}
  
""".

function:getPrefixedIRI
    a sh:SPARQLFunction ;
    rdfs:comment "Gets prefixed IRI from full IRI." ;
    sh:parameter [
        sh:path function:IRI ;
        sh:datatype xsd:anyURI ;
        sh:description "The full IRI of a RDF resource as defined in an ontology." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """
       SELECT ?result WHERE {
{
    VALUES (?IRI_base ?IRI_prefix) {
      ("http://purl.org/dc/dcmitype/" "dcm")
      ("http://purl.org/dc/terms/" "dct")
      ("http://xmlns.com/foaf/0.1/" "foaf")
      ("http://www.w3.org/2002/07/owl#" "owl")
      ("http://www.w3.org/ns/prov#" "prov")
      ("http://www.w3.org/1999/02/22-rdf-syntax-ns#" "rdf")
      ("http://www.w3.org/ns/rdfa#" "rdfa")
      ("http://www.w3.org/2000/01/rdf-schema#" "rdfs")
      ("http://www.w3.org/ns/shacl#" "sh")
      ("http://www.w3.org/2004/02/skos/core#" "skos")
      ("http://purl.org/adms/status/" "status")
      ("http://purl.org/vocab/vann/" "vann")
      ("http://rdfs.org/ns/void#" "void")
      ("http://www.w3.org/2001/XMLSchema#" "xsd")
    }
  }
  UNION 
  {
    ?ontology vann:preferredNamespaceUri ?IRI_base;
              vann:preferredNamespacePrefix ?IRI_prefix.
  }
  FILTER (STRSTARTS(STR($IRI), ?IRI_base))
  BIND(STR($IRI) as ?IRI_href)
  BIND(STRAFTER(STR($IRI), ?IRI_base) as ?IRI_reference)
  BIND(COALESCE(CONCAT(STR(?IRI_prefix),":",?IRI_reference), ?IRI_href) as ?result)
}
        """ .
